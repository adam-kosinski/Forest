let server = require("./server");


class PlayerStatus {
  constructor(name){
    this.name = name;
    this.connected = true; //because when we make one of these, it's triggered by a connected player
  }
}


class Player {
  constructor(name, species, location){
    this.name = name;
    this.species = species; //this influences how much certain animals trust you, as well as your skills
    this.location = location; //name of the player's place
    this.traveling = false;
    this.items = []; //inventory

    //below things are defined during game generation
    //this.skills = []; //skill objects

    //the more an animal trusts you, the more they will tell you / the more quests they will give. Keys are NPC animal names, values are trust level
    this.trust = {};
  }
}


class Element {
  constructor(tagName, id, parentId="map_overlay", className="", style={}){ //1st four args are strings, style is an object
    this.tagName = tagName;
    this.id = id;
    this.parentId = parentId; //has to be a hardcoded element in index.html
    this.className = className;
    this.style = style;
  }
}


class Map {
  constructor(){
    this.adj_matrix = [
      [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0],
      [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0],
      [0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0],
      [0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0],
      [0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0],
      [0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0],
      [0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0],
      [0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,0],
      [0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0],
      [0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0]
    ];
    //non-redundant, easily-editable way for me to define places, processed into actual places later in the constructor
    this.place_def = {
      "Waterfall of Wisdom": {
        "The Spiral Stones": {x:89, y:126, adj:["Clifftop Pines"]},
        "Cliff": {x:235, y:176, adj:["Clifftop Pines"]},
        "Waterbase": {x:262, y:274, adj:["Cliffbase", "Log"]},
        "Cliffbase": {x:331, y:246, adj:["Waterbase", "Hillbase", "Log"]}
      },
      "Prickly Pines": {
        "Clifftop Pines": {x:195, y:123, adj:["The Spiral Stones", "Cliff", "Cliffside Grove"]},
        "Cliffside Grove": {x:304, y:113, adj:["Clifftop Pines", "Bear Den", "Behind Bear"]},
        "Bear Den": {x:401, y:137, adj:["Cliffside Grove", "Behind Bear", "Behind Bear Right", "Redhill"]},
        "Behind Bear": {x:418, y:56, adj:["Cliffside Grove", "Bear Den", "Behind Bear Right"]},
        "Behind Bear Right": {x:511, y:95, adj:["Bear Den", "Behind Bear", "Backhill"]},
        "Redhill": {x:458, y:197, adj:["Bear Den", "Backhill", "Hillbase", "Clearing"]},
        "Backhill": {x:569, y:117, adj:["Behind Bear Right", "Redhill"]},
        "Hillbase": {x:453, y:252, adj:["Cliffbase", "Log", "Redhill", "Clearing"]},
        "Clearing": {x:564, y:189, adj:["Redhill", "Redhill"]}
      },
      "Roaring Rapids": {
        "Log": {x:395, y:309, adj:["Waterbase", "Cliffbase", "Hillbase", "River Right"]},
        "River Right": {x:450, y:344, adj:["Log"]}
      }
    }
    this.places = {}; //object with key = place name, value = Place object

    //process this.place_def
    for(let region in this.place_def){
      for(let place_name in this.place_def[region]){
        let info = this.place_def[region][place_name];
        let place = new Place(place_name, {x: info.x, y: info.y}, region, info.adj);
        this.places[place_name] = place;
      }
    }
  }
}


class Place {
  //note: place image files should be named place_name.jpg, spaces replaced with underscores (to be consistent with item/thing naming)

  constructor(name, pos, region, adj_place_names=[], background_position="top left"){
    //constants
    this.name = name;
    this.pos = pos; //{x:_, y:_} -unscaled coords for position on the map_zoom_div
    this.region = region; //string - name of region
    //this.background_position = background_position; //css value
    this.adj_place_names = adj_place_names; //array of strings

    //these are filled out during game generation

    this.items = []; //Item objects, see items.js - all items in a place are listed here, even the ones generated by things
    this.things = []; //Thing objects, see things.js
  }
  removeThing(id){
    for(let i=0; i<this.things.length; i++){
      if(this.things[i].id == id){
        this.things.splice(i, 1);
        return;
      }
    }
  }

}




// EXPORT CLASSES SO OTHER FILES CAN USE THEM  ------------------------------------------------------------------
exports.PlayerStatus = PlayerStatus;
exports.Player = Player;
exports.Element = Element;
exports.Map = Map;
exports.Place = Place;
