
class PlayerStatus {
  constructor(name){
    this.name = name;
    this.connected = true; //because when we make one of these, it's triggered by a connected player
  }
}


class Player {
  constructor(name, species, location){
    this.name = name;
    this.species = species; //this influences how much certain animals trust you, as well as your skills
    this.energy = 10;
    this.max_energy = 10;
    this.location = location; //index of the starting place
    //this.occupied_with = undefined; //can be a thing object, used to reset things we are no longer interacting with
    this.climbed = []; //names of things this player has climbed, gets reset when moving
    this.items = [];

    //below things are defined during game generation
    this.skills = []; //skill objects
    this.active_skills = []; //names of active skills

    //the more an animal trusts you, the more they will tell you / the more quests they will give. Keys are NPC animal names, values are trust level
    this.trust = {};
  }
  give(item){
    //used to give this player items
    //note: no need to worry about item.n_visible_for, the client inventory display ignores that and displays the full quantity always
    //check if player already has this item
    for(let i=0; i<this.items.length; i++){
      if(this.items[i].sameAs(item)){
        this.items[i].quantity++;
        return;
      }
    }
    //they don't have it, add it
    this.items.push(item);
  }
}

class Skill {
  constructor(name, energy, description){
    this.name = name;
    this.energy = energy;
    this.description = description;
  }
}


class Element {
  constructor(tagName, id, parentId="game_board", className="", style={}){ //1st four args are strings, style is an object
    this.tagName = tagName;
    this.id = id;
    this.parentId = parentId; //has to be a hardcoded element in index.html
    this.className = className;
    this.style = style;
  }
}


class Map {
  constructor(){
    this.adj_matrix = [
      [0,1,0,0,0,0,0],
      [1,0,1,0,0,0,0],
      [0,1,0,1,0,0,0],
      [0,0,1,0,1,0,1],
      [0,0,0,1,0,1,1],
      [0,0,0,0,1,0,0],
      [0,0,0,1,1,0,0]
    ];
    this.places = [
      new Place("0", {x:89,y:126}, "Waterfall of Wisdom"),
      new Place("Cliffside Grove", {x:254,y:105}, "Prickly Pines"),
      new Place("Bear Den", {x:401,y:137}, "Prickly Pines"),
      new Place("3", {x:501,y:212}, "Prickly Pines"),
      new Place("4", {x:408,y:273}, "Prickly Pines"),
      new Place("5", {x:323,y:270}, "Waterfall of Wisdom"),
      new Place("6", {x:486,y:333}, "Prickly Pines")
    ];
  }
}


class Place {
  constructor(name, pos, region){
    //constants
    this.name = name;
    this.pos = pos; //{x:_, y:_} -unscaled coords for position on the game_board
    this.region = region; //string - name of region

    //these are defined during game generation

    this.items = []; //objects, see items.js - all items in a place are listed here, even the ones generated by things
    this.things = []; //objects, see things.js

    this.knowledge = []; //Potential knowledge to learn here, from talking - only if animals live here
    this.quests = []; //Potential quests to get here - only if animals live here
  }
  getInteractions(player){
    return {
      actions: ["Search", "Focused Search"], //focused search will also call the search method - see the socket.on in server.js
      messages: []
    };
  }
  addItem(item){
    //function to check if place already has an item, and consolidate the items if yes
    for(let i=0; i<this.items.length; i++){
      if(this.items[i].sameAs(item)){
        let place_item = this.items[i];
        place_item.quantity += item.quantity;
        for(let name in this.items[i].n_visible_for){
          place_item.n_visible_for[name] += item.n_visible_for[name];
        }
        return;
      }
    }
    this.items.push(item);
  }
  search(player, focus=undefined){
    //player: Player object of the searching player
    //focus: string, name of item to search for specifically. Having a focus reduces search time and increases chances of finding that item
    focus = focus.toLowerCase(); //case insensitive for better usability
    console.log(player.name + " searching, focus = " + focus);

    let search_duration = 15000; //ms
    let total_attempts = 15;
    let n = 0;

    let interval = setInterval(function(){
      console.log("search attempt");

      n++;
      if(n >= total_attempts){clearInterval(interval);}
    }, search_duration/total_attempts);
  }
  leave(player){
    //runs when a player leaves this place
    console.log(player.name + " left " + this.name);
    player.climbed = [];
    for(let i=0; i<this.things.length; i++){
      if(this.things[i].leave){this.things[i].leave(player);}
    }
  }
}

class Knowledge {
  constructor(){

  }
}

class Quest {
  constructor(){

  }
}



// EXPORT CLASSES SO OTHER FILES CAN USE THEM  ------------------------------------------------------------------
exports.PlayerStatus = PlayerStatus;
exports.Player = Player;
exports.Skill = Skill;
exports.Element = Element;
exports.Map = Map;
exports.Place = Place;
exports.Knowledge = Knowledge;
exports.Quest = Quest;
